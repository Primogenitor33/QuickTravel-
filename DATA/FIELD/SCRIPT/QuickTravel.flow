import ("QT/Chk_Access/Chk_Access_Dorm_F.flow");
import ("QT/Chk_Access/Chk_Access_PaulowniaMall_F.flow");
import ("QT/Chk_Access/Chk_Access_GekkoukanHigh.flow");
import ("QT/Chk_Access/Chk_Access_Dorm.flow");
import ("QT/Chk_Access/Chk_Access_PaulowniaMall.flow");
import ("QT/Chk_Access/Chk_Access_IwatodaiStation.flow");
import ("QT/Chk_Access/Chk_Access_PortIslandStation.flow");
import ("QT/Chk_Access/Chk_Access_Godaigo.flow");
import ("QT/Chk_Access/Chk_Access_Tartarus.flow");
import ("QT/Chk_Access/Chk_Access_YakushimaBeach.flow");
import ("QT/Chk_Access/Chk_Access_MoonlightBridge.flow");
import ("QT/Chk_Access/Chk_Access_NaganakiShrine.flow");
import ("QT/Open_Win/Open_YakushimaBeach_Win.flow");
import ("QT/Open_Win/Open_MoonlightBridge_Win.flow");
import ("QT/School.flow");
import ("QT/Dorm.flow");
import ("QT/Mall.flow");
import ("QT/Iwatodai.flow");
import ("QT/PortIsland.flow");
import ("QT/Shrine.flow");
import ("QT/Godaigo.flow");
import ("Records/Record.flow");
import ("QT/Dorm.msg");
import ("QT/Shrine.msg");
import ("QT/Shared.msg");
import ("QT/FESMall.flow");
import ("QT/FES.msg");
import ("QT/Chk_Access/Chk_Access.msg");
import ("QuickTravel.msg");

void QuickTravelDisplay()
{
	switch(GET_FIELD_MAJOR())
	{
		case 4: // Dorm (The Answer)
			FESDormTravel();
			break;
		case 5: // Paulownia Mall (The Answer)
			FESMallTravel();
			break;
		case 6: // Gekkoukan High
			SchoolTravel();
			break;
		case 7: // Dorm
			DormTravel();
			break;
		case 8: // Paulownia Mall
			MallTravel();
			break;
		case 9: // Iwatodai Station
			IwatodaiTravel();
			break;
		case 10: // Port Island Station
			PortIslandTravel();
			break;
		case 12: // Naganaki Shrine
			ShrineTravel();
			break;
		case 14: // Godaigo (Kyoto Trip)
			GodaigoTravel();
			break;
		case 32: // Tartarus
			if(GET_FLOOR_ID() == 1)
			{
				TartarusTravel();
			}
			else
			{
				field_order_party_unhooked();
			}
			break;
		case 33: // Yakushima Beach
			YakushimaTravel();
			break;
		case 37: // Moonlight Bridge
			MoonlightTravel();
			break;
		default:
			field_order_party_unhooked();
			break;
	}
	return;
}

void ShowTutorial()
{
	MSG_HELP( QT_TUTORIAL );
	BIT_ON( 9999 );
	return;
}

void No_QuickTravel()
{
	OPEN_MSG_WIN();
	MSG( No_QT );
	CLOSE_MSG_WIN();
	return;
}

void No_Facilities()
{
	OPEN_MSG_WIN();
	MSG( No_Facilities );
	CLOSE_MSG_WIN();
	return;
}

void No_Map()
{
	OPEN_MSG_WIN();
	MSG( No_Map );
	CLOSE_MSG_WIN();
	return;
}

void FESDormTravel()
{
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	FUNCTION_011C(12, DormLobby);
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	if( BIT_CHK( 721 ) == 0 )
	{
		SET_MASK( 10 );
	}
	int choice = SEL( Dorm_F );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch(choice)
	{
		
		case 0: // 1F, Lobby
			downstair_2f();
			break;
		case 1: // Desert of Doors
			entrance_to_dungeon();
			break;
		case 2: // Velvet Room
			entrance_to_velvetroom();
			break;
		case 3: // Paulownia Mall
			counter_door();
			break;
		default:
			break;
	}
}

void FESMallTravel()
{
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	FUNCTION_011C(12, MallLobby);
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open shops on Start
	SEL_CHK_PAD(11,31);
	int select = SEL( FESMall );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Iwatodai Dorm
			return_to_dormitory();
			break;
		case 1: // Facilities
			FESMallFacilities();
			break;
		case 31: //Shops (Start)
			FESMallFacilities();
			break;
		default:
			break;
	}
	return;
}

void FESMallFacilities()
{
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	FUNCTION_011C(12, MallLobby);
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	int select = SEL( FESMallFacilities );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // FES Be blue V
			FESMallAccessory();
			break;
		case 1: // FES Police Station
			FESMallPolice();
			break;
		case 2: // FES Antique Store
			FESMallAntique();
			break;
		case 3: // FES Drug Store
			FESMallDrug();
			break;
		default:
			break;
	}
	return;
}

void SchoolTravel()
{
	int mask = FindMaskSchool();
	if( ( BIT_CHK( 3680 ) ) == 1 && ( BIT_CHK( 72 ) == 1 ) )
	{
		OPEN_MSG_WIN();
		MSG( STOP_TEACHERS_ROOM );
		CLOSE_MSG_WIN();
		return;
	}
	else if( BIT_CHK( 3680 ) == 1 )
	{
		ChkGek004_005();
		return;
	}
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	SchoolNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shop on Start
	SEL_CHK_PAD(11,31);
	if (mask != 0)
	{
		SET_MASK(mask);
	}
	int select = SEL( School );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // School Entranceway
			SchoolEntrance();
			break;
		case 1: // 1st Floor, Main Lobby
			SchoolLobby();
			break;
		case 2: // 1st Floor, Faculty Hall
			SchoolFacultyHall();
			break;
		case 3: //1st Floor, Laboratory Hall
			SchoolLaboratoryHall();
			break;
		case 4: // 1st Floor, Corridor
			SchoolCorridor();
			break;
		case 5: // Sports Hall
			SchoolSportsHall();
			break;
		case 6: // 2nd Floor, Hallway
			SchoolSecondHall();
			break;
		case 7: // Classrom 2-F
			SchoolHomeroom();
			break;
		case 8: // Rooftop
			SchoolRooftop();
			break;
		case 9: // School Shop
			SchoolShop();
			break;
		case 10: // Town Map
			SchoolMap();
			break;
		case 30: // Town Map (Select)
			SchoolMap();
			break;
		case 31: // School Shop (Start)
			SchoolShop();
			break;
		default:
			break;
	}
	return;
}

void SchoolNavi()
{
	switch(GET_FIELD_MINOR())
    {
        case 2:
            FUNCTION_011C(12, SchoolEntrance);
			break;
        case 1:
            FUNCTION_011C(12, SchoolLobby);
			break;
        case 7:
            FUNCTION_011C(12, SchoolFacultyHall);
			break;
        case 11:
            FUNCTION_011C(12, SchoolLaboratoryHall);
			break;
        case 16:
            FUNCTION_011C(12, SchoolCorridor);
			break;
        case 20:
            FUNCTION_011C(12, SchoolSportsHall);
			break;
        case 4:
            FUNCTION_011C(12, SchoolSecondHall);
			break;
		case 3:
			FUNCTION_011C(12, SchoolHomeroom);
			break;
		case 5:
			FUNCTION_011C(12, SchoolRooftop);
			break;
		default:
			break;
    }
	return;
}

void DormTravel()
{
	if (GET_FIELD_MINOR() == 9 && (( FUNCTION_0083() == 4 ) || ( FUNCTION_0083() == 5 )))
	{
		DormTravelEntrance();
		return;
	}
	int mask = FindMaskDorm();
	bool male = ( BIT_CHK( 3081 ) == 1 ) || ( BIT_CHK( 3082 ) == 1 );
	bool female = ( BIT_CHK( 3084 ) == 1 ) || ( BIT_CHK( 3083 ) == 1 ); 
	bool operation = ( FUNCTION_0083() == 8 ) && ( ( ( GET_MONTH() == 7 ) && ( GET_DAY_OF_MONTH() == 7 ) ) || ( ( GET_MONTH() == 11 ) && ( GET_DAY_OF_MONTH() == 3 ) ) || ( ( GET_MONTH() == 11 ) && ( GET_DAY_OF_MONTH() == 22 ) ) );
	if( BIT_CHK( 3584 ) == 1 )
	{
		ChkDorm003_015_Junpei();
		return;
	}
	if(operation)
	{
		ChkDorm006_005();
		return;
	}
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	DormNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shop on Start
	SEL_CHK_PAD(11,31);
	if (mask != 0)
	{
		SET_MASK(mask);
	}
	int select = SEL( Dorm );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Your Room
			DormRoom();
			break;
		case 1: // Dorm Entrance
			DormEntrance();
			break;
		case 2: // 1st Floor, Lounge
			DormLobby();
			break;
		case 3: // 2nd Floor, Hallway
			DormFloorTwo();
			break;
		case 4: // 3rd Floor, Hallway
			DormFloorThree();
			break;
		case 5: // 4th Floor, Hallway
			DormFloorFour();
			break;
		case 6: // Meeting Room
			MeetingRoom();
			break;
		case 7: // Town Map
			DormMap();
			break;
		case 30: // Town Map (Select)
			DormMap();
			break;
		case 31: //Facilities (Start)
			No_Facilities();
			break;
		default:
			break;
	}
	return;
}

void DormNavi()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            FUNCTION_011C(12, DormRoom);
			break;
        case 9:
            FUNCTION_011C(12, DormEntrance);
			break;
        case 2:
            FUNCTION_011C(12, DormLobby);
			break;
        case 3:
            FUNCTION_011C(12, DormFloorTwo);
			break;
        case 4:
            FUNCTION_011C(12, DormFloorThree);
			break;
        case 5:
            FUNCTION_011C(12, DormFloorFour);
			break;
        case 6:
            FUNCTION_011C(12, DormMeetingRoom);
			break;
		case 14:
			FUNCTION_011C(12, DormShinjiRoom);
			break;
		case 15:
			FUNCTION_011C(12, DormEmptyRoom);
			break;
		default:
			break;
    }
	return;
}

void DormTravelEntrance()
{
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	FUNCTION_011C(12, DormEntrance);
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shop on Start
	SEL_CHK_PAD(11,31);
	int select = SEL( SELDormEntrance );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // 1st Floor, Lounge
			DormLobby();
			break;
		case 1: // Town Map
			DormMap();
			break;
		case 30: // Town Map (Select)
			DormMap();
			break;
		case 31: //Facilities (Start)
			No_Facilities();
			break;
		default:
			break;
	}
	return;
}

void MallTravel()
{
	int mask = FindMaskMall();
	bool operation = ( GET_MONTH() == 9 ) && ( GET_DAY_OF_MONTH() == 5 ) && ( FUNCTION_0083() == 8 );
	if(operation)
	{
		ChkPaul001_002();
		return;
	}
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	MallNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shops on Start
	SEL_CHK_PAD(11,31);
	if (mask != 0)
	{
		SET_MASK(mask);
	}
	int select = SEL( Mall );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Paulownia Mall
			MallLobby();
			break;
		case 1: // Club Escapade
			MallClub();
			break;
		case 2: // Back Alley
			MallAlley();
			break;	
		case 3: // Facilities
			MallFacilities();
			break;
		case 4: // Town Map
			MallMap();
			break;
		case 30: //Town Map (Select)
			MallMap();
			break;
		case 31: //Shops (Start)
			MallFacilities();
			break;
		default:
			break;
	}
	return;
}

void MallNavi()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            FUNCTION_011C(12, MallLobby);
			break;
        case 2:
            FUNCTION_011C(12, MallEscapade);
			break;
        case 9:
            FUNCTION_011C(12, MallBackAlley);
			break;
		default:
			break;
    }
	return;
}

void MallFacilities()
{
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	MallNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Check for Fuuka's
	if (!BIT_CHK(9997)) {
		SET_MASK( 128 );
	}
	int select = SEL( MallFacilities );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Velvet Room
			MallVelvet();
			break;
		case 1: // Coffee
			MallCoffee();
			break;
		case 2: // Be blue V
			MallAccessory();
			break;
		case 3: // Police Station
			MallPolice();
			break;
		case 4: // Karaoke
			MallKaraoke();
			break;
		case 5: // Antique Store
			MallAntique();
			break;
		case 6: // Drug Store
			MallDrug();
			break;
		case 7: // Fuuka's Record Shop
			MallRecord();
			break;
		case 8: // Crane Game
			MallCrane();
			break;
		case 9: // Arcade
			MallArcade();
			break;
		case 30: //Town Map (Select)
			MallMap();
			break;
		default:
			break;
	}
	return;
}

void IwatodaiTravel()
{
	int mask = FindMaskIwatodai();
	bool operation = ( GET_MONTH() == 10 ) && ( GET_DAY_OF_MONTH() == 4 ) && ( FUNCTION_0083() == 8 );
	if(operation)
	{
		ChkIwa001_002();
		return;
	}
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	IwatodaiNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shops on Start
	SEL_CHK_PAD(11,31);
	if (mask != 0)
	{
		SET_MASK(mask);
	}
	int select = SEL( Iwatodai );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Iwatodai Station
			IwatodaiStation();
			break;
		case 1: // Iwatodai Strip Mall, Ground Floor
			IwatodaiGroundFloor();
			break;
		case 2: // Iwatodai Strip Mall, Upper Floors
			IwatodaiUpperFloor();
			break;
		case 3: // Facilities
			IwatodaiFacilities();
			break;
		case 4: // Town Map
			IwatodaiMap();
			break;
		case 30: //Town Map (Select)
			IwatodaiMap();
			break;
		case 31: //Shops (Start)
			IwatodaiFacilities();
			break;
		default:
			break;
	}
	return;
}

void IwatodaiNavi()
{
    switch(GET_FIELD_MINOR())
    {
        case 2:
            FUNCTION_011C(12, IwatodaiStation);
			break;
        case 1:
            FUNCTION_011C(12, IwatodaiGroundFloor);
			break;
        case 7:
            FUNCTION_011C(12, IwatodaiUpperFloor);
			break;
		default:
			break;
    }
	return;
}

void IwatodaiFacilities()
{
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	IwatodaiNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	int select = SEL( IwatodaiFacilities );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Duck
			WildDuck();
			break;
		case 1: // Wakatsu
			Wakatsu();
			break;
		case 2: // Hagakure
			Hagakure();
			break;
		case 3: // Octopia
			Octopia();
			break;
		case 30: //Town Map (Select)
			IwatodaiMap();
			break;
		default:
			break;
	}
	return;
}

void PortIslandTravel()
{
	int mask = FindMaskPort();
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	PortNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shops on Start
	SEL_CHK_PAD(11,31);
	if (mask != 0)
	{
		SET_MASK(mask);
	}
	int select = SEL( PortIsland );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Port Island Station
			PortStation();
			break;
		case 1: // Port Island Station Outskirts
			PortOutskirts();
			break;
		case 2: // Facilities
			PortFacilities();
			break;
		case 3: // Town Map
			PortMap();
			break;
		case 30: // Town Map (Select)
			PortMap();
			break;
		case 31: // Shops (Start)
			PortFacilities();
			break;
		default:
			break;
	}
	return;
}

void PortNavi()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            FUNCTION_011C(12, PortStation);
			break;
        case 2:
            FUNCTION_011C(12, PortOutskirts);
			break;
		default:
			break;
    }
	return;
}

void PortFacilities()
{
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	PortNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	int select = SEL( PortFacilities );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Flower
			FlowerShop();
			break;
		case 1: // Theater
			PortTheater();
			break;
		case 30: // Town Map (Select)
			PortMap();
			break;
		default:
			break;
	}
	return;
}

void ShrineTravel()
{
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	FUNCTION_011C(12, ShrineNavi);
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	int select = SEL( Shrine );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Offertory Box
			Offering();
			break;
		case 1: // Fortune Draw
			Fortune();
			break;
		case 2: // Sushi Shrine
			Sushi();
			break;
		case 3: //Town Map
			ShrineMap();
			break;
		case 30: // Town Map (Select)
			ShrineMap();
			break;
		default:
			break;
	}
	return;
}

void GodaigoTravel()
{
	if ( BIT_CHK( 9999 ) == 0 )
	{
		ShowTutorial();
	}
	OPEN_MSG_WIN();
	MSG( Choose );
	FUNCTION_00B7(0);
	GodaigoNavi();
	//Close menu on Circle
	SEL_CHK_PAD(6,99);
	//Open map on Select
	SEL_CHK_PAD(8,30);
	//Open shops on Start
	SEL_CHK_PAD(8,31);
	int select = SEL( Godaigo );
	FUNCTION_0005();
	CLOSE_MSG_WIN();
	switch (select)
	{
		case 0: // Godaigo, 1st Floor, Lobby
			GodaigoLobby();
			break;
		case 1: // Godaigo, 2nd Floor
			GodaigoFloorTwo();
			break;
		case 2: // Godaigo, 3rd Floor
			GodaigoFloorThree();
			break;
		case 30: // Town Map (Select)
			No_Map();
			break;
		case 31: // Shops (Start)
			No_Facilities();
			break;
		default:
			break;
	}
	return;
}

void GodaigoNavi()
{
    switch(GET_FIELD_MINOR())
    {
        case 2:
            FUNCTION_011C(12, GodaigoLobby);
			break;
        case 3:
            FUNCTION_011C(12, GodaigoFloorTwo);
			break;
        case 4:
            FUNCTION_011C(12, GodaigoFloorThree);
			break;
		case 5:
            FUNCTION_011C(12, GodaigoHotspring);
			break;
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
           FUNCTION_011C(12, GodaigoMenRoom);
		   break;
		default:
			break;
    }
	return;
}

void TartarusTravel()
{
	switch(GET_FIELD_MINOR())
	{
		case 2: // Tartarus, Entrance
			if ( BIT_CHK( 9999 ) == 0 )
			{
				ShowTutorial();
			}
			OPEN_MSG_WIN();
			MSG( Choose );
			FUNCTION_00B7(0);
			FUNCTION_011C(13, TartarusNavi);
			SEL_CHK_PAD(6,99);
			if (!( ( ( ( ( ( ( ( ( ( ( ( ( BIT_CHK( 3501 ) == 1 ) || ( BIT_CHK( 3504 ) == 1 ) ) || ( BIT_CHK( 3505 ) == 1 ) ) || ( BIT_CHK( 3506 ) == 1 ) ) || ( BIT_CHK( 3507 ) == 1 ) ) || ( BIT_CHK( 3508 ) == 1 ) ) || ( BIT_CHK( 3509 ) == 1 ) ) 
			|| ( BIT_CHK( 3510 ) == 1 ) ) || ( BIT_CHK( 3511 ) == 1 ) ) || ( BIT_CHK( 3512 ) == 1 ) ) || ( BIT_CHK( 3513 ) == 1 ) ) || ( BIT_CHK( 3514 ) == 1 ) ) || ( BIT_CHK( 3515 ) == 1 ) ))
			{
				SET_MASK( 4 );
			}
			else if (!( ( ( ( ( ( ( ( ( ( ( ( ( ( BIT_CHK( 3516 ) == 1 ) || ( BIT_CHK( 3517 ) == 1 ) ) || ( BIT_CHK( 3518 ) == 1 ) ) || ( BIT_CHK( 3519 ) == 1 ) ) || ( BIT_CHK( 3528 ) == 1 ) ) || ( BIT_CHK( 3529 ) == 1 ) ) || ( BIT_CHK( 3530 ) == 1 ) ) 
			|| ( BIT_CHK( 3531 ) == 1 ) ) || ( BIT_CHK( 3532 ) == 1 ) ) || ( BIT_CHK( 3533 ) == 1 ) ) || ( BIT_CHK( 3534 ) == 1 ) ) || ( BIT_CHK( 3535 ) == 1 ) ) || ( BIT_CHK( 3500 ) == 1 ) ) || ( BIT_CHK( 3499 ) == 1 ) ))
			{
			   SET_MASK( 4 );
			}
			int choice = SEL( Tartarus );
			FUNCTION_0005();
			CLOSE_MSG_WIN();
			switch(choice)
			{
				case 0:
					start_exploration();
					break;
				case 1:
					into_velvet_room();
					break;
				case 2:
					warp_point();
					break;
				case 3:
					get_out_here();
					break;
				default:
					break;
			}
			break;
		default:
			No_QuickTravel();
			break;
	}
}

void YakushimaTravel()
{
	OpenYakushimaWin_ALL();
}

void MoonlightTravel()
{
	OpenMoonlightWin_001();
}

int FindMaskSchool()
{
    switch(GET_FIELD_MINOR())
    {
        case 2:
            return 1;
        case 1:
            return 2;
        case 7:
            return 4;
        case 11:
            return 8;
        case 16:
            return 16;
        case 20:
            return 32;
        case 4:
            return 64;
		case 3:
			return 128;
		case 5:
			return 256;
		default:
			break;
    }
	return 0;
}

int FindMaskDorm()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            return 1;
        case 9:
            return 2;
        case 2:
            return 4;
        case 3:
            return 8;
        case 4:
            return 16;
        case 5:
            return 32;
        case 6:
            return 64;
		default:
			break;
    }
	return 0;
}

int FindMaskMall()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            return 1;
        case 2:
            return 2;
        case 9:
            return 4;
		default:
			break;
    }
	return 0;
}

int FindMaskIwatodai()
{
    switch(GET_FIELD_MINOR())
    {
        case 2:
            return 1;
        case 1:
            return 2;
        case 7:
            return 4;
		default:
			break;
    }
	return 0;
}

int FindMaskPort()
{
    switch(GET_FIELD_MINOR())
    {
        case 1:
            return 1;
        case 2:
            return 2;
		default:
			break;
    }
	return 0;
}

int FindMaskGodaigo()
{
    switch(GET_FIELD_MINOR())
    {
        case 2:
            return 1;
        case 3:
            return 2;
        case 4:
            return 4;
		default:
			break;
    }
	return 0;
}